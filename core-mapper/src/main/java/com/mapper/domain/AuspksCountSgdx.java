package com.mapper.domain;

import java.io.Serializable;
import java.util.Date;

public class AuspksCountSgdx implements Serializable {
    /**
     * 字段: auspks_count_sgdx.id<br/>
     * 主键: 自动增长<br/>
     * 必填: true<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 
     *
     * @mbggenerated
     */
    private Integer id;

    /**
     * 字段: auspks_count_sgdx.total_date<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 统计日期
     *
     * @mbggenerated
     */
    private Date totalDate;

    /**
     * 字段: auspks_count_sgdx.oned<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第一名出现大的次数
     *
     * @mbggenerated
     */
    private Integer oned;

    /**
     * 字段: auspks_count_sgdx.onex<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第一名出现小的次数
     *
     * @mbggenerated
     */
    private Integer onex;

    /**
     * 字段: auspks_count_sgdx.twod<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第二名出现大的次数
     *
     * @mbggenerated
     */
    private Integer twod;

    /**
     * 字段: auspks_count_sgdx.twox<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第二名出现小的次数
     *
     * @mbggenerated
     */
    private Integer twox;

    /**
     * 字段: auspks_count_sgdx.threed<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第三名出现大的次数
     *
     * @mbggenerated
     */
    private Integer threed;

    /**
     * 字段: auspks_count_sgdx.threex<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第三名出现小的次数
     *
     * @mbggenerated
     */
    private Integer threex;

    /**
     * 字段: auspks_count_sgdx.fourd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第四名出现大的次数
     *
     * @mbggenerated
     */
    private Integer fourd;

    /**
     * 字段: auspks_count_sgdx.fourx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第四名出现小的次数
     *
     * @mbggenerated
     */
    private Integer fourx;

    /**
     * 字段: auspks_count_sgdx.fived<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第五名出现大的次数
     *
     * @mbggenerated
     */
    private Integer fived;

    /**
     * 字段: auspks_count_sgdx.fivex<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第五名出现小的次数
     *
     * @mbggenerated
     */
    private Integer fivex;

    /**
     * 字段: auspks_count_sgdx.sixd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第六名出现大的次数
     *
     * @mbggenerated
     */
    private Integer sixd;

    /**
     * 字段: auspks_count_sgdx.sixx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第六名出现小的次数
     *
     * @mbggenerated
     */
    private Integer sixx;

    /**
     * 字段: auspks_count_sgdx.sevend<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第七名出现大的次数
     *
     * @mbggenerated
     */
    private Integer sevend;

    /**
     * 字段: auspks_count_sgdx.sevenx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第七名出现小的次数
     *
     * @mbggenerated
     */
    private Integer sevenx;

    /**
     * 字段: auspks_count_sgdx.eightd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第八名出现大的次数
     *
     * @mbggenerated
     */
    private Integer eightd;

    /**
     * 字段: auspks_count_sgdx.eightx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第八名出现小的次数
     *
     * @mbggenerated
     */
    private Integer eightx;

    /**
     * 字段: auspks_count_sgdx.nightd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第九名出现大的次数
     *
     * @mbggenerated
     */
    private Integer nightd;

    /**
     * 字段: auspks_count_sgdx.nightx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第九名出现小的次数
     *
     * @mbggenerated
     */
    private Integer nightx;

    /**
     * 字段: auspks_count_sgdx.tend<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第十名出现大的次数
     *
     * @mbggenerated
     */
    private Integer tend;

    /**
     * 字段: auspks_count_sgdx.tenx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第十名出现小的次数
     *
     * @mbggenerated
     */
    private Integer tenx;

    /**
     * 字段: auspks_count_sgdx.create_time<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 19<br/>
     * 说明: 创建时间
     *
     * @mbggenerated
     */
    private Date createTime;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table auspks_count_sgdx
     *
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    /**
     * @return auspks_count_sgdx.id: 
     *
     * @mbggenerated
     */
    public Integer getId() {
        return id;
    }

    /**
     * 字段: auspks_count_sgdx.id<br/>
     * 主键: 自动增长<br/>
     * 必填: true<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 
     *
     * @mbggenerated
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * @return auspks_count_sgdx.total_date: 统计日期
     *
     * @mbggenerated
     */
    public Date getTotalDate() {
        return totalDate;
    }

    /**
     * 字段: auspks_count_sgdx.total_date<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 统计日期
     *
     * @mbggenerated
     */
    public void setTotalDate(Date totalDate) {
        this.totalDate = totalDate;
    }

    /**
     * @return auspks_count_sgdx.oned: 第一名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getOned() {
        return oned;
    }

    /**
     * 字段: auspks_count_sgdx.oned<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第一名出现大的次数
     *
     * @mbggenerated
     */
    public void setOned(Integer oned) {
        this.oned = oned;
    }

    /**
     * @return auspks_count_sgdx.onex: 第一名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getOnex() {
        return onex;
    }

    /**
     * 字段: auspks_count_sgdx.onex<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第一名出现小的次数
     *
     * @mbggenerated
     */
    public void setOnex(Integer onex) {
        this.onex = onex;
    }

    /**
     * @return auspks_count_sgdx.twod: 第二名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getTwod() {
        return twod;
    }

    /**
     * 字段: auspks_count_sgdx.twod<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第二名出现大的次数
     *
     * @mbggenerated
     */
    public void setTwod(Integer twod) {
        this.twod = twod;
    }

    /**
     * @return auspks_count_sgdx.twox: 第二名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getTwox() {
        return twox;
    }

    /**
     * 字段: auspks_count_sgdx.twox<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第二名出现小的次数
     *
     * @mbggenerated
     */
    public void setTwox(Integer twox) {
        this.twox = twox;
    }

    /**
     * @return auspks_count_sgdx.threed: 第三名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getThreed() {
        return threed;
    }

    /**
     * 字段: auspks_count_sgdx.threed<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第三名出现大的次数
     *
     * @mbggenerated
     */
    public void setThreed(Integer threed) {
        this.threed = threed;
    }

    /**
     * @return auspks_count_sgdx.threex: 第三名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getThreex() {
        return threex;
    }

    /**
     * 字段: auspks_count_sgdx.threex<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第三名出现小的次数
     *
     * @mbggenerated
     */
    public void setThreex(Integer threex) {
        this.threex = threex;
    }

    /**
     * @return auspks_count_sgdx.fourd: 第四名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getFourd() {
        return fourd;
    }

    /**
     * 字段: auspks_count_sgdx.fourd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第四名出现大的次数
     *
     * @mbggenerated
     */
    public void setFourd(Integer fourd) {
        this.fourd = fourd;
    }

    /**
     * @return auspks_count_sgdx.fourx: 第四名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getFourx() {
        return fourx;
    }

    /**
     * 字段: auspks_count_sgdx.fourx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第四名出现小的次数
     *
     * @mbggenerated
     */
    public void setFourx(Integer fourx) {
        this.fourx = fourx;
    }

    /**
     * @return auspks_count_sgdx.fived: 第五名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getFived() {
        return fived;
    }

    /**
     * 字段: auspks_count_sgdx.fived<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第五名出现大的次数
     *
     * @mbggenerated
     */
    public void setFived(Integer fived) {
        this.fived = fived;
    }

    /**
     * @return auspks_count_sgdx.fivex: 第五名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getFivex() {
        return fivex;
    }

    /**
     * 字段: auspks_count_sgdx.fivex<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第五名出现小的次数
     *
     * @mbggenerated
     */
    public void setFivex(Integer fivex) {
        this.fivex = fivex;
    }

    /**
     * @return auspks_count_sgdx.sixd: 第六名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getSixd() {
        return sixd;
    }

    /**
     * 字段: auspks_count_sgdx.sixd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第六名出现大的次数
     *
     * @mbggenerated
     */
    public void setSixd(Integer sixd) {
        this.sixd = sixd;
    }

    /**
     * @return auspks_count_sgdx.sixx: 第六名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getSixx() {
        return sixx;
    }

    /**
     * 字段: auspks_count_sgdx.sixx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第六名出现小的次数
     *
     * @mbggenerated
     */
    public void setSixx(Integer sixx) {
        this.sixx = sixx;
    }

    /**
     * @return auspks_count_sgdx.sevend: 第七名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getSevend() {
        return sevend;
    }

    /**
     * 字段: auspks_count_sgdx.sevend<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第七名出现大的次数
     *
     * @mbggenerated
     */
    public void setSevend(Integer sevend) {
        this.sevend = sevend;
    }

    /**
     * @return auspks_count_sgdx.sevenx: 第七名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getSevenx() {
        return sevenx;
    }

    /**
     * 字段: auspks_count_sgdx.sevenx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第七名出现小的次数
     *
     * @mbggenerated
     */
    public void setSevenx(Integer sevenx) {
        this.sevenx = sevenx;
    }

    /**
     * @return auspks_count_sgdx.eightd: 第八名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getEightd() {
        return eightd;
    }

    /**
     * 字段: auspks_count_sgdx.eightd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第八名出现大的次数
     *
     * @mbggenerated
     */
    public void setEightd(Integer eightd) {
        this.eightd = eightd;
    }

    /**
     * @return auspks_count_sgdx.eightx: 第八名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getEightx() {
        return eightx;
    }

    /**
     * 字段: auspks_count_sgdx.eightx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第八名出现小的次数
     *
     * @mbggenerated
     */
    public void setEightx(Integer eightx) {
        this.eightx = eightx;
    }

    /**
     * @return auspks_count_sgdx.nightd: 第九名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getNightd() {
        return nightd;
    }

    /**
     * 字段: auspks_count_sgdx.nightd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第九名出现大的次数
     *
     * @mbggenerated
     */
    public void setNightd(Integer nightd) {
        this.nightd = nightd;
    }

    /**
     * @return auspks_count_sgdx.nightx: 第九名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getNightx() {
        return nightx;
    }

    /**
     * 字段: auspks_count_sgdx.nightx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第九名出现小的次数
     *
     * @mbggenerated
     */
    public void setNightx(Integer nightx) {
        this.nightx = nightx;
    }

    /**
     * @return auspks_count_sgdx.tend: 第十名出现大的次数
     *
     * @mbggenerated
     */
    public Integer getTend() {
        return tend;
    }

    /**
     * 字段: auspks_count_sgdx.tend<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第十名出现大的次数
     *
     * @mbggenerated
     */
    public void setTend(Integer tend) {
        this.tend = tend;
    }

    /**
     * @return auspks_count_sgdx.tenx: 第十名出现小的次数
     *
     * @mbggenerated
     */
    public Integer getTenx() {
        return tenx;
    }

    /**
     * 字段: auspks_count_sgdx.tenx<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 第十名出现小的次数
     *
     * @mbggenerated
     */
    public void setTenx(Integer tenx) {
        this.tenx = tenx;
    }

    /**
     * @return auspks_count_sgdx.create_time: 创建时间
     *
     * @mbggenerated
     */
    public Date getCreateTime() {
        return createTime;
    }

    /**
     * 字段: auspks_count_sgdx.create_time<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 19<br/>
     * 说明: 创建时间
     *
     * @mbggenerated
     */
    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auspks_count_sgdx
     *
     * @mbggenerated
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        AuspksCountSgdx other = (AuspksCountSgdx) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getTotalDate() == null ? other.getTotalDate() == null : this.getTotalDate().equals(other.getTotalDate()))
            && (this.getOned() == null ? other.getOned() == null : this.getOned().equals(other.getOned()))
            && (this.getOnex() == null ? other.getOnex() == null : this.getOnex().equals(other.getOnex()))
            && (this.getTwod() == null ? other.getTwod() == null : this.getTwod().equals(other.getTwod()))
            && (this.getTwox() == null ? other.getTwox() == null : this.getTwox().equals(other.getTwox()))
            && (this.getThreed() == null ? other.getThreed() == null : this.getThreed().equals(other.getThreed()))
            && (this.getThreex() == null ? other.getThreex() == null : this.getThreex().equals(other.getThreex()))
            && (this.getFourd() == null ? other.getFourd() == null : this.getFourd().equals(other.getFourd()))
            && (this.getFourx() == null ? other.getFourx() == null : this.getFourx().equals(other.getFourx()))
            && (this.getFived() == null ? other.getFived() == null : this.getFived().equals(other.getFived()))
            && (this.getFivex() == null ? other.getFivex() == null : this.getFivex().equals(other.getFivex()))
            && (this.getSixd() == null ? other.getSixd() == null : this.getSixd().equals(other.getSixd()))
            && (this.getSixx() == null ? other.getSixx() == null : this.getSixx().equals(other.getSixx()))
            && (this.getSevend() == null ? other.getSevend() == null : this.getSevend().equals(other.getSevend()))
            && (this.getSevenx() == null ? other.getSevenx() == null : this.getSevenx().equals(other.getSevenx()))
            && (this.getEightd() == null ? other.getEightd() == null : this.getEightd().equals(other.getEightd()))
            && (this.getEightx() == null ? other.getEightx() == null : this.getEightx().equals(other.getEightx()))
            && (this.getNightd() == null ? other.getNightd() == null : this.getNightd().equals(other.getNightd()))
            && (this.getNightx() == null ? other.getNightx() == null : this.getNightx().equals(other.getNightx()))
            && (this.getTend() == null ? other.getTend() == null : this.getTend().equals(other.getTend()))
            && (this.getTenx() == null ? other.getTenx() == null : this.getTenx().equals(other.getTenx()))
            && (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()));
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auspks_count_sgdx
     *
     * @mbggenerated
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getTotalDate() == null) ? 0 : getTotalDate().hashCode());
        result = prime * result + ((getOned() == null) ? 0 : getOned().hashCode());
        result = prime * result + ((getOnex() == null) ? 0 : getOnex().hashCode());
        result = prime * result + ((getTwod() == null) ? 0 : getTwod().hashCode());
        result = prime * result + ((getTwox() == null) ? 0 : getTwox().hashCode());
        result = prime * result + ((getThreed() == null) ? 0 : getThreed().hashCode());
        result = prime * result + ((getThreex() == null) ? 0 : getThreex().hashCode());
        result = prime * result + ((getFourd() == null) ? 0 : getFourd().hashCode());
        result = prime * result + ((getFourx() == null) ? 0 : getFourx().hashCode());
        result = prime * result + ((getFived() == null) ? 0 : getFived().hashCode());
        result = prime * result + ((getFivex() == null) ? 0 : getFivex().hashCode());
        result = prime * result + ((getSixd() == null) ? 0 : getSixd().hashCode());
        result = prime * result + ((getSixx() == null) ? 0 : getSixx().hashCode());
        result = prime * result + ((getSevend() == null) ? 0 : getSevend().hashCode());
        result = prime * result + ((getSevenx() == null) ? 0 : getSevenx().hashCode());
        result = prime * result + ((getEightd() == null) ? 0 : getEightd().hashCode());
        result = prime * result + ((getEightx() == null) ? 0 : getEightx().hashCode());
        result = prime * result + ((getNightd() == null) ? 0 : getNightd().hashCode());
        result = prime * result + ((getNightx() == null) ? 0 : getNightx().hashCode());
        result = prime * result + ((getTend() == null) ? 0 : getTend().hashCode());
        result = prime * result + ((getTenx() == null) ? 0 : getTenx().hashCode());
        result = prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());
        return result;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auspks_count_sgdx
     *
     * @mbggenerated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", totalDate=").append(totalDate);
        sb.append(", oned=").append(oned);
        sb.append(", onex=").append(onex);
        sb.append(", twod=").append(twod);
        sb.append(", twox=").append(twox);
        sb.append(", threed=").append(threed);
        sb.append(", threex=").append(threex);
        sb.append(", fourd=").append(fourd);
        sb.append(", fourx=").append(fourx);
        sb.append(", fived=").append(fived);
        sb.append(", fivex=").append(fivex);
        sb.append(", sixd=").append(sixd);
        sb.append(", sixx=").append(sixx);
        sb.append(", sevend=").append(sevend);
        sb.append(", sevenx=").append(sevenx);
        sb.append(", eightd=").append(eightd);
        sb.append(", eightx=").append(eightx);
        sb.append(", nightd=").append(nightd);
        sb.append(", nightx=").append(nightx);
        sb.append(", tend=").append(tend);
        sb.append(", tenx=").append(tenx);
        sb.append(", createTime=").append(createTime);
        sb.append("]");
        return sb.toString();
    }
}