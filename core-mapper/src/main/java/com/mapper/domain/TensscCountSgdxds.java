package com.mapper.domain;

import java.io.Serializable;
import java.util.Date;

public class TensscCountSgdxds implements Serializable {
    /**
     * 字段: tenssc_count_sgdxds.id<br/>
     * 主键: 自动增长<br/>
     * 必填: true<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 
     *
     * @mbggenerated
     */
    private Integer id;

    /**
     * 字段: tenssc_count_sgdxds.date<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 19<br/>
     * 说明: 日期
     *
     * @mbggenerated
     */
    private Date date;

    /**
     * 字段: tenssc_count_sgdxds.one<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 1出现的次数
     *
     * @mbggenerated
     */
    private Integer one;

    /**
     * 字段: tenssc_count_sgdxds.two<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 2出现的次数
     *
     * @mbggenerated
     */
    private Integer two;

    /**
     * 字段: tenssc_count_sgdxds.three<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 3出现的次数
     *
     * @mbggenerated
     */
    private Integer three;

    /**
     * 字段: tenssc_count_sgdxds.four<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 4出现的次数
     *
     * @mbggenerated
     */
    private Integer four;

    /**
     * 字段: tenssc_count_sgdxds.five<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 5出现的次数
     *
     * @mbggenerated
     */
    private Integer five;

    /**
     * 字段: tenssc_count_sgdxds.six<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 6出现的次数
     *
     * @mbggenerated
     */
    private Integer six;

    /**
     * 字段: tenssc_count_sgdxds.seven<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 7出现的次数
     *
     * @mbggenerated
     */
    private Integer seven;

    /**
     * 字段: tenssc_count_sgdxds.eight<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 8出现的次数
     *
     * @mbggenerated
     */
    private Integer eight;

    /**
     * 字段: tenssc_count_sgdxds.nigh<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 9出现的次数
     *
     * @mbggenerated
     */
    private Integer nigh;

    /**
     * 字段: tenssc_count_sgdxds.ten<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 10(或者0)出现的次数
     *
     * @mbggenerated
     */
    private Integer ten;

    /**
     * 字段: tenssc_count_sgdxds.big<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现大的次数
     *
     * @mbggenerated
     */
    private Integer big;

    /**
     * 字段: tenssc_count_sgdxds.small<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现小的次数
     *
     * @mbggenerated
     */
    private Integer small;

    /**
     * 字段: tenssc_count_sgdxds.odd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现单的次数
     *
     * @mbggenerated
     */
    private Integer odd;

    /**
     * 字段: tenssc_count_sgdxds.even<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现双的次数
     *
     * @mbggenerated
     */
    private Integer even;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tenssc_count_sgdxds
     *
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    /**
     * @return tenssc_count_sgdxds.id: 
     *
     * @mbggenerated
     */
    public Integer getId() {
        return id;
    }

    /**
     * 字段: tenssc_count_sgdxds.id<br/>
     * 主键: 自动增长<br/>
     * 必填: true<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 
     *
     * @mbggenerated
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * @return tenssc_count_sgdxds.date: 日期
     *
     * @mbggenerated
     */
    public Date getDate() {
        return date;
    }

    /**
     * 字段: tenssc_count_sgdxds.date<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 19<br/>
     * 说明: 日期
     *
     * @mbggenerated
     */
    public void setDate(Date date) {
        this.date = date;
    }

    /**
     * @return tenssc_count_sgdxds.one: 1出现的次数
     *
     * @mbggenerated
     */
    public Integer getOne() {
        return one;
    }

    /**
     * 字段: tenssc_count_sgdxds.one<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 1出现的次数
     *
     * @mbggenerated
     */
    public void setOne(Integer one) {
        this.one = one;
    }

    /**
     * @return tenssc_count_sgdxds.two: 2出现的次数
     *
     * @mbggenerated
     */
    public Integer getTwo() {
        return two;
    }

    /**
     * 字段: tenssc_count_sgdxds.two<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 2出现的次数
     *
     * @mbggenerated
     */
    public void setTwo(Integer two) {
        this.two = two;
    }

    /**
     * @return tenssc_count_sgdxds.three: 3出现的次数
     *
     * @mbggenerated
     */
    public Integer getThree() {
        return three;
    }

    /**
     * 字段: tenssc_count_sgdxds.three<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 3出现的次数
     *
     * @mbggenerated
     */
    public void setThree(Integer three) {
        this.three = three;
    }

    /**
     * @return tenssc_count_sgdxds.four: 4出现的次数
     *
     * @mbggenerated
     */
    public Integer getFour() {
        return four;
    }

    /**
     * 字段: tenssc_count_sgdxds.four<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 4出现的次数
     *
     * @mbggenerated
     */
    public void setFour(Integer four) {
        this.four = four;
    }

    /**
     * @return tenssc_count_sgdxds.five: 5出现的次数
     *
     * @mbggenerated
     */
    public Integer getFive() {
        return five;
    }

    /**
     * 字段: tenssc_count_sgdxds.five<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 5出现的次数
     *
     * @mbggenerated
     */
    public void setFive(Integer five) {
        this.five = five;
    }

    /**
     * @return tenssc_count_sgdxds.six: 6出现的次数
     *
     * @mbggenerated
     */
    public Integer getSix() {
        return six;
    }

    /**
     * 字段: tenssc_count_sgdxds.six<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 6出现的次数
     *
     * @mbggenerated
     */
    public void setSix(Integer six) {
        this.six = six;
    }

    /**
     * @return tenssc_count_sgdxds.seven: 7出现的次数
     *
     * @mbggenerated
     */
    public Integer getSeven() {
        return seven;
    }

    /**
     * 字段: tenssc_count_sgdxds.seven<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 7出现的次数
     *
     * @mbggenerated
     */
    public void setSeven(Integer seven) {
        this.seven = seven;
    }

    /**
     * @return tenssc_count_sgdxds.eight: 8出现的次数
     *
     * @mbggenerated
     */
    public Integer getEight() {
        return eight;
    }

    /**
     * 字段: tenssc_count_sgdxds.eight<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 8出现的次数
     *
     * @mbggenerated
     */
    public void setEight(Integer eight) {
        this.eight = eight;
    }

    /**
     * @return tenssc_count_sgdxds.nigh: 9出现的次数
     *
     * @mbggenerated
     */
    public Integer getNigh() {
        return nigh;
    }

    /**
     * 字段: tenssc_count_sgdxds.nigh<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 9出现的次数
     *
     * @mbggenerated
     */
    public void setNigh(Integer nigh) {
        this.nigh = nigh;
    }

    /**
     * @return tenssc_count_sgdxds.ten: 10(或者0)出现的次数
     *
     * @mbggenerated
     */
    public Integer getTen() {
        return ten;
    }

    /**
     * 字段: tenssc_count_sgdxds.ten<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 10(或者0)出现的次数
     *
     * @mbggenerated
     */
    public void setTen(Integer ten) {
        this.ten = ten;
    }

    /**
     * @return tenssc_count_sgdxds.big: 出现大的次数
     *
     * @mbggenerated
     */
    public Integer getBig() {
        return big;
    }

    /**
     * 字段: tenssc_count_sgdxds.big<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现大的次数
     *
     * @mbggenerated
     */
    public void setBig(Integer big) {
        this.big = big;
    }

    /**
     * @return tenssc_count_sgdxds.small: 出现小的次数
     *
     * @mbggenerated
     */
    public Integer getSmall() {
        return small;
    }

    /**
     * 字段: tenssc_count_sgdxds.small<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现小的次数
     *
     * @mbggenerated
     */
    public void setSmall(Integer small) {
        this.small = small;
    }

    /**
     * @return tenssc_count_sgdxds.odd: 出现单的次数
     *
     * @mbggenerated
     */
    public Integer getOdd() {
        return odd;
    }

    /**
     * 字段: tenssc_count_sgdxds.odd<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现单的次数
     *
     * @mbggenerated
     */
    public void setOdd(Integer odd) {
        this.odd = odd;
    }

    /**
     * @return tenssc_count_sgdxds.even: 出现双的次数
     *
     * @mbggenerated
     */
    public Integer getEven() {
        return even;
    }

    /**
     * 字段: tenssc_count_sgdxds.even<br/>
     * 必填: false<br/>
     * 缺省: <br/>
     * 长度: 10<br/>
     * 说明: 出现双的次数
     *
     * @mbggenerated
     */
    public void setEven(Integer even) {
        this.even = even;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tenssc_count_sgdxds
     *
     * @mbggenerated
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        TensscCountSgdxds other = (TensscCountSgdxds) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getDate() == null ? other.getDate() == null : this.getDate().equals(other.getDate()))
            && (this.getOne() == null ? other.getOne() == null : this.getOne().equals(other.getOne()))
            && (this.getTwo() == null ? other.getTwo() == null : this.getTwo().equals(other.getTwo()))
            && (this.getThree() == null ? other.getThree() == null : this.getThree().equals(other.getThree()))
            && (this.getFour() == null ? other.getFour() == null : this.getFour().equals(other.getFour()))
            && (this.getFive() == null ? other.getFive() == null : this.getFive().equals(other.getFive()))
            && (this.getSix() == null ? other.getSix() == null : this.getSix().equals(other.getSix()))
            && (this.getSeven() == null ? other.getSeven() == null : this.getSeven().equals(other.getSeven()))
            && (this.getEight() == null ? other.getEight() == null : this.getEight().equals(other.getEight()))
            && (this.getNigh() == null ? other.getNigh() == null : this.getNigh().equals(other.getNigh()))
            && (this.getTen() == null ? other.getTen() == null : this.getTen().equals(other.getTen()))
            && (this.getBig() == null ? other.getBig() == null : this.getBig().equals(other.getBig()))
            && (this.getSmall() == null ? other.getSmall() == null : this.getSmall().equals(other.getSmall()))
            && (this.getOdd() == null ? other.getOdd() == null : this.getOdd().equals(other.getOdd()))
            && (this.getEven() == null ? other.getEven() == null : this.getEven().equals(other.getEven()));
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tenssc_count_sgdxds
     *
     * @mbggenerated
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getDate() == null) ? 0 : getDate().hashCode());
        result = prime * result + ((getOne() == null) ? 0 : getOne().hashCode());
        result = prime * result + ((getTwo() == null) ? 0 : getTwo().hashCode());
        result = prime * result + ((getThree() == null) ? 0 : getThree().hashCode());
        result = prime * result + ((getFour() == null) ? 0 : getFour().hashCode());
        result = prime * result + ((getFive() == null) ? 0 : getFive().hashCode());
        result = prime * result + ((getSix() == null) ? 0 : getSix().hashCode());
        result = prime * result + ((getSeven() == null) ? 0 : getSeven().hashCode());
        result = prime * result + ((getEight() == null) ? 0 : getEight().hashCode());
        result = prime * result + ((getNigh() == null) ? 0 : getNigh().hashCode());
        result = prime * result + ((getTen() == null) ? 0 : getTen().hashCode());
        result = prime * result + ((getBig() == null) ? 0 : getBig().hashCode());
        result = prime * result + ((getSmall() == null) ? 0 : getSmall().hashCode());
        result = prime * result + ((getOdd() == null) ? 0 : getOdd().hashCode());
        result = prime * result + ((getEven() == null) ? 0 : getEven().hashCode());
        return result;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tenssc_count_sgdxds
     *
     * @mbggenerated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", date=").append(date);
        sb.append(", one=").append(one);
        sb.append(", two=").append(two);
        sb.append(", three=").append(three);
        sb.append(", four=").append(four);
        sb.append(", five=").append(five);
        sb.append(", six=").append(six);
        sb.append(", seven=").append(seven);
        sb.append(", eight=").append(eight);
        sb.append(", nigh=").append(nigh);
        sb.append(", ten=").append(ten);
        sb.append(", big=").append(big);
        sb.append(", small=").append(small);
        sb.append(", odd=").append(odd);
        sb.append(", even=").append(even);
        sb.append("]");
        return sb.toString();
    }
}