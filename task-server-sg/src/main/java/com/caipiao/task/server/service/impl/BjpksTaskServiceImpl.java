package com.caipiao.task.server.service.impl;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.caipiao.core.library.enums.CaipiaoSumCountEnum;import com.caipiao.core.library.enums.CaipiaoTypeEnum;import com.caipiao.core.library.model.ResultInfo;import com.caipiao.core.library.vo.result.LotterySgResult;import com.caipiao.core.library.model.dao.SscModel.LotterySgModel;import com.caipiao.core.library.tool.BjpksUtils;import com.caipiao.core.library.tool.DateUtils;import com.caipiao.core.library.tool.RandomUtil;import com.caipiao.task.server.callable.ThreadTaskByw;import com.caipiao.task.server.callable.ThreadTaskCpk;import com.caipiao.task.server.callable.ThreadTaskKcw;import com.caipiao.task.server.config.ActiveMQConfig;import com.caipiao.task.server.service.BjpksTaskService;import com.caipiao.task.server.util.CommonService;import com.mapper.*;import com.mapper.domain.*;import com.xxl.job.core.log.XxlJobLogger;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jms.core.JmsMessagingTemplate;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.Map;import java.util.concurrent.Future;//import com.caipiao.task.server.util.ThreadUtil;@Servicepublic class BjpksTaskServiceImpl extends CommonServiceImpl implements BjpksTaskService {    private static final Logger logger = LoggerFactory.getLogger(BjpksTaskServiceImpl.class);    @Autowired    private BjpksLotterySgMapper bjpksLotterySgMapper;    @Autowired    private BjpksCountSgdxMapper bjpksCountSgdxMapper;    @Autowired    private BjpksCountSgdsMapper bjpksCountSgdsMapper;    @Autowired    private BjpksCountSglhMapper bjpksCountSglhMapper;    @Autowired    private BjpksRecommendMapper bjpksRecommendMapper;    @Autowired    private BjpksKillNumberMapper bjpksKillNumberMapper;    @Autowired    private JmsMessagingTemplate jmsMessagingTemplate;    @Autowired    private BjpksTaskService bjpksTaskService;    @Autowired    private CommonService commonService;    @Override    @Transactional    public void addBjpksPrevSg() {        // 一天总期数        int count = 44;        // 获取当前赛果最后一期数据        BjpksLotterySgExample sgExample = new BjpksLotterySgExample();        sgExample.setOrderByClause("ideal_time desc");        BjpksLotterySg lastSg = bjpksLotterySgMapper.selectOneByExample(sgExample);        // 获取理想开奖时间        String idealTime = lastSg.getIdealTime();        // 将字符串转化为Date        Date dateTime = DateUtils.dateStringToDate(idealTime, DateUtils.fullDatePattern);        // 最后一期期号        Integer issue = Integer.valueOf(lastSg.getIssue());        JSONArray jsonArray = new JSONArray();        BjpksLotterySg sg;        String time = DateUtils.formatDate(dateTime, "HH:mm:ss");        if (!"23:50:00".equals(time)) {            while (time.compareTo("23:50:00") < 0) {                sg = new BjpksLotterySg();                issue += 1;                sg.setIssue(String.valueOf(issue));                dateTime = this.nextIssueTime(dateTime);                time = DateUtils.formatDate(dateTime, DateUtils.timePattern);                sg.setIdealTime(DateUtils.formatDate(dateTime, DateUtils.fullDatePattern));                BjpksLotterySg targetSg = new BjpksLotterySg();                BeanUtils.copyProperties(sg, targetSg);                jsonArray.add(targetSg);                bjpksLotterySgMapper.insertSelective(sg);            }        }        String date = idealTime.substring(0, 10);        if (date.compareTo(DateUtils.formatDate(new Date(), DateUtils.datePattern)) > 0) {            if (jsonArray.size() > 0) {                String jsonString = JSONObject.toJSONString(jsonArray);                jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_YUQI_DATA, "BjpksLotterySg:" + jsonString);            }            return;        }        for (int i = 0; i < count; i++) {            if (i == 0) {                dateTime = DateUtils.parseDate(DateUtils.formatDate(dateTime, DateUtils.datePattern) + " 09:10:00", DateUtils.fullDatePattern);                dateTime = DateUtils.getDayAfter(dateTime, 1L);            }            sg = new BjpksLotterySg();            issue += 1;            sg.setIssue(String.valueOf(issue));            dateTime = this.nextIssueTime(dateTime);            sg.setIdealTime(DateUtils.formatDate(dateTime, DateUtils.fullDatePattern));            BjpksLotterySg targetSg = new BjpksLotterySg();            BeanUtils.copyProperties(sg, targetSg);            jsonArray.add(targetSg);            bjpksLotterySgMapper.insertSelective(sg);        }        String jsonString = JSONObject.toJSONString(jsonArray);        jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_YUQI_DATA, "BjpksLotterySg:" + jsonString);    }    @Override    public void addBjpksSg() {        Future<List<LotterySgModel>> cpk = threadPool.submit(new ThreadTaskCpk("bjpks", 15));        Future<List<LotterySgModel>> kcw = threadPool.submit(new ThreadTaskKcw("bjpk10", 15));        Future<List<LotterySgModel>> byw = threadPool.submit(new ThreadTaskByw("bjpk10", 15));        LotterySgResult lotterySgResult = obtainSgResult(cpk, kcw, byw);        Map<String, LotterySgModel> cpkMap = lotterySgResult.getCpk();        Map<String, LotterySgModel> kcwMap = lotterySgResult.getKcw();        Map<String, LotterySgModel> bywMap = lotterySgResult.getByw();        // 获取本地近15期开奖结果        BjpksLotterySgExample sgExample = new BjpksLotterySgExample();        BjpksLotterySgExample.Criteria criteria = sgExample.createCriteria();        criteria.andIdealTimeLessThanOrEqualTo(DateUtils.formatDate(new Date(), DateUtils.fullDatePattern));        sgExample.setOffset(0);        sgExample.setLimit(15);        sgExample.setOrderByClause("`ideal_time` desc");        List<BjpksLotterySg> sgList = bjpksLotterySgMapper.selectByExample(sgExample);        // 判空        if (CollectionUtils.isEmpty(sgList)) {            return;        }        String cpkNumber = "", kcwNumber = "", bywNumber = "", number;        int i = 0;        for (BjpksLotterySg sg : sgList) {            i++;            String issue = sg.getIssue();            // 获取开奖结果            LotterySgModel cpkModel = cpkMap.get(issue);            LotterySgModel kcwModel = kcwMap.get(issue);            LotterySgModel bywModel = bywMap.get(issue);//            //这一期赛果有值 的个数，//            int thisSgDataSize = TaskUtil.getNotNulSgModel(cpkModel,kcwModel,bywModel);//            // 当这期赛果数据 个数 小于 2，不执行//            if (thisSgDataSize < 2) {//                continue;//            }            // 获取【彩票控】当前实际开奖期号与结果            if (cpkModel != null) {                cpkNumber = cpkModel.getSg();            }            // 获取【开彩网】当前实际开奖期号与结果            if (kcwModel != null) {                kcwNumber = kcwModel.getSg();            }            // 获取【博易网】当前实际开奖期号与结果            if (bywModel != null) {                bywNumber = bywModel.getSg();            }            // 获取最终开奖结果            number = TaskUtil.getTrueSg(cpkNumber, kcwNumber, bywNumber);            if (StringUtils.isEmpty(number)) { //两个赛果相同才入库                continue;            }            // 是否需要修改            boolean isPush = false;            // 判断是否需要修改赛果            if (StringUtils.isBlank(sg.getNumber())) {                sg.setNumber(number);                sg.setTime(DateUtils.formatDate(new Date(), DateUtils.fullDatePattern));                sg.setOpenStatus("AUTO");                isPush = true;            }            // 判断是否需要更新彩票控赛果            if (StringUtils.isBlank(sg.getCpkNumber()) && StringUtils.isNotBlank(cpkNumber)) {                sg.setCpkNumber(cpkNumber);            }            // 判断是否需要更新开彩网赛果            if (StringUtils.isBlank(sg.getKcwNumber()) && StringUtils.isNotBlank(kcwNumber)) {                sg.setKcwNumber(kcwNumber);            }            // 判断是否需要更新博易网赛果            if (StringUtils.isBlank(sg.getBywNumber()) && StringUtils.isNotBlank(bywNumber)) {                sg.setBywNumber(bywNumber);            }            int count = 0;            String jsonBjpksLotterySg = null;            if (isPush) {                count = bjpksLotterySgMapper.updateByPrimaryKeySelective(sg);                jsonBjpksLotterySg = JSON.toJSONString(sg).replace(":", "$");            }            if (isPush && count > 0) {                //检查预期数据                checkBjpksYuqiData();                logger.info("【北京PK10】消息：BJPKS:{},{}", issue, number);                // 将赛果推送到北京PK10相关队列//                rabbitTemplate.convertAndSend(RabbitConfig.TOPIC_EXCHANGE, RabbitConfig.BINDING_BJPKS, "BJPKS:" + issue + ":" + number);                try {                    jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_LM, "BJPKS:" + issue + ":" + number + ":" + jsonBjpksLotterySg);                    jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_CMC_CQJ, "BJPKS:" + issue + ":" + number);                    jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_DS_CQJ, "BJPKS:" + issue + ":" + number);                    jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_DWD, "BJPKS:" + issue + ":" + number);                    jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_GYH, "BJPKS:" + issue + ":" + number);                    jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_UPDATE_DATA, "BJPKS:" + issue + ":" + number);                } catch (Exception e) {                    logger.error("北京PK发送消息失败：{}", e);                }                JSONObject object = new JSONObject();                JSONObject lottery = new JSONObject();                object.put("issue", issue);                object.put("number", number);                object.put("nextTime", DateUtils.parseDate(commonService.bjpksQueryNextSg().getIdealTime(), DateUtils.fullDatePattern).getTime() / 1000);                object.put("nextIssue", commonService.bjpksQueryNextSg().getIssue());                Calendar startCal = Calendar.getInstance();                startCal.setTime(DateUtils.parseDate(sg.getIdealTime(), DateUtils.fullDatePattern));                startCal.set(Calendar.HOUR_OF_DAY, 9);                startCal.set(Calendar.MINUTE, 30);                startCal.set(Calendar.SECOND, 0);                long jiange = DateUtils.timeReduce(sg.getIdealTime(), DateUtils.formatDate(startCal.getTime(), DateUtils.fullDatePattern));                int openCount = (int) (jiange / 1200) + 1;                int noOpenCount = CaipiaoSumCountEnum.BJPKS.getSumCount() - openCount;                object.put("openCount", openCount);                object.put("noOpenCount", noOpenCount);                lottery.put(CaipiaoTypeEnum.BJPKS.getTagType(), object);                String jsonString = ResultInfo.ok(lottery).toJSONString();                try {                    //每次只发送最新一条                    if (i == 1) {                        logger.info("TOPIC_BJPKS发送消息：{}", jsonString);                        jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS, jsonString);                    }                } catch (Exception e) {                    logger.error("北京PK发送消息失败：{}", e);                }            }        }    }    //检查预期数据    public void checkBjpksYuqiData() {        try {            //检查预期数据任务开始            BjpksLotterySgExample sgExample = new BjpksLotterySgExample();            BjpksLotterySgExample.Criteria criteria = sgExample.createCriteria();            criteria.andIdealTimeGreaterThan(DateUtils.formatDate(new Date(), DateUtils.fullDatePattern));            sgExample.setOrderByClause("`ideal_time` asc");            int afterCount = bjpksLotterySgMapper.countByExample(sgExample);            if (afterCount < 10) {  //当预期数据少于10，则跑一下预期数据任务                bjpksTaskService.addBjpksPrevSg();            }            //检查预期数据任务结束        } catch (Exception e) {            logger.error("北京PK检查预期数据失败：{}", e);        }    }    @Override    @Transactional    public void addBjpksRecommend() {        // 获取当前最后一期【免费推荐】数据        BjpksRecommendExample recommendExample = new BjpksRecommendExample();        recommendExample.setOrderByClause("`issue` desc");        BjpksRecommend lastRecommend = bjpksRecommendMapper.selectOneByExample(recommendExample);        // 获取下一期期号信息        BjpksLotterySg nextSg = commonService.bjpksQueryNextSg();        // 查询遗漏数据        List<BjpksLotterySg> sgList = this.queryOmittedData(lastRecommend.getIssue(), nextSg.getIssue());        // 判空        if (CollectionUtils.isEmpty(sgList)) {            return;        }        // 循环生成【免费推荐】数据        BjpksRecommend recommend;        for (int i = sgList.size() - 1; i >= 0; i--) {            recommend = new BjpksRecommend();            // 设置期号            recommend.setIssue(sgList.get(i).getIssue());            // 生成冠军号码推荐 5个            StringBuilder builder1 = new StringBuilder();            String numberStr1 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder1.append(numberStr1);            // 根据号码生成大小|单双            String[] str1 = numberStr1.split(",");            builder1.append("|");            builder1.append(Integer.parseInt(str1[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder1.append("|");            builder1.append(Integer.parseInt(str1[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setFirst(builder1.toString());            // 生成冠军号码推荐 5个            StringBuilder builder2 = new StringBuilder();            String numberStr2 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder2.append(numberStr2);            // 根据号码生成大小|单双            String[] str2 = numberStr2.split(",");            builder2.append("|");            builder2.append(Integer.parseInt(str2[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder2.append("|");            builder2.append(Integer.parseInt(str2[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setSecond(builder2.toString());            // 生成冠军号码推荐 5个            StringBuilder builder3 = new StringBuilder();            String numberStr3 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder3.append(numberStr3);            // 根据号码生成大小|单双            String[] str3 = numberStr3.split(",");            builder3.append("|");            builder3.append(Integer.parseInt(str3[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder3.append("|");            builder3.append(Integer.parseInt(str3[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setThird(builder3.toString());            // 生成冠军号码推荐 5个            StringBuilder builder4 = new StringBuilder();            String numberStr4 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder4.append(numberStr4);            // 根据号码生成大小|单双            String[] str4 = numberStr4.split(",");            builder4.append("|");            builder4.append(Integer.parseInt(str4[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder4.append("|");            builder4.append(Integer.parseInt(str4[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setFourth(builder4.toString());            // 生成冠军号码推荐 5个            StringBuilder builder5 = new StringBuilder();            String numberStr5 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder5.append(numberStr5);            // 根据号码生成大小|单双            String[] str5 = numberStr5.split(",");            builder5.append("|");            builder5.append(Integer.parseInt(str5[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder5.append("|");            builder5.append(Integer.parseInt(str5[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setFifth(builder5.toString());            // 生成冠军号码推荐 5个            StringBuilder builder6 = new StringBuilder();            String numberStr6 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder6.append(numberStr6);            // 根据号码生成大小|单双            String[] str6 = numberStr6.split(",");            builder6.append("|");            builder6.append(Integer.parseInt(str6[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder6.append("|");            builder6.append(Integer.parseInt(str6[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setSixth(builder6.toString());            // 生成冠军号码推荐 5个            StringBuilder builder7 = new StringBuilder();            String numberStr7 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder7.append(numberStr7);            // 根据号码生成大小|单双            String[] str7 = numberStr7.split(",");            builder7.append("|");            builder7.append(Integer.parseInt(str7[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder7.append("|");            builder7.append(Integer.parseInt(str7[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setSeventh(builder7.toString());            // 生成冠军号码推荐 5个            StringBuilder builder8 = new StringBuilder();            String numberStr8 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder8.append(numberStr8);            // 根据号码生成大小|单双            String[] str8 = numberStr8.split(",");            builder8.append("|");            builder8.append(Integer.parseInt(str8[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder8.append("|");            builder8.append(Integer.parseInt(str8[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setEighth(builder8.toString());            // 生成冠军号码推荐 5个            StringBuilder builder9 = new StringBuilder();            String numberStr9 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder9.append(numberStr9);            // 根据号码生成大小|单双            String[] str9 = numberStr9.split(",");            builder9.append("|");            builder9.append(Integer.parseInt(str9[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder9.append("|");            builder9.append(Integer.parseInt(str9[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setNinth(builder9.toString());            // 生成冠军号码推荐 5个            StringBuilder builder10 = new StringBuilder();            String numberStr10 = RandomUtil.getRandomStringNoSame(5, 1, 11);            builder10.append(numberStr10);            // 根据号码生成大小|单双            String[] str10 = numberStr10.split(",");            builder10.append("|");            builder10.append(Integer.parseInt(str10[RandomUtil.getRandomOne(0, 5)]) % 2 == 0 ? "双" : "单");            builder10.append("|");            builder10.append(Integer.parseInt(str10[RandomUtil.getRandomOne(0, 5)]) >= 5 ? "大" : "小");            recommend.setTenth(builder10.toString());            String numberStr11 = RandomUtil.getRandomStringNoSame(5, 3, 20);            recommend.setFirstSecond(numberStr11);            recommend.setTime(DateUtils.formatDate(new Date(), DateUtils.fullDatePattern));            // 保存生成数据            bjpksRecommendMapper.insertSelective(recommend);            String jsonObject = JSON.toJSONString(recommend);            jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_RECOMMEND_DATA, "BjpksRecommend:" + jsonObject);        }    }    @Override    @Transactional    public void addBjpksKillNumber() {        // 查询当前最后一期【公式杀号】数据        BjpksKillNumberExample killNumberExample = new BjpksKillNumberExample();        killNumberExample.setOrderByClause("`issue` DESC");        BjpksKillNumber killNumber = bjpksKillNumberMapper.selectOneByExample(killNumberExample);        // 获取下一期期号信息        BjpksLotterySg nextSg = commonService.bjpksQueryNextSg();        // 查询遗漏数据        List<BjpksLotterySg> sgList = this.queryOmittedData(killNumber.getIssue(), nextSg.getIssue());        // 判空        if (CollectionUtils.isEmpty(sgList)) {            return;        }        // 生成杀号        BjpksKillNumber nextKillNumber;        for (int i = sgList.size() - 1; i >= 0; i--) {            BjpksLotterySg sg = sgList.get(i);            // 生成下一期杀号信息            nextKillNumber = BjpksUtils.getKillNumber(sg.getIssue());            bjpksKillNumberMapper.insertSelective(nextKillNumber);            String jsonObject = JSON.toJSONString(nextKillNumber);            jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_KILL_DATA, "BjpksKillNumber:" + jsonObject);        }    }    @Override    public void sendMessageChangeIssue() {        //每一期开始时间发送一个消息        //时间范围： 0 30/20 9-23 * * ?        //北京pk10  采集时间  9:30-23:50 20分钟一期  延迟1-2分钟采集到数据        // 在这个时间内就生效：   7:30-23:50    0:30-3:10        Long time0 = null;  //代表现在时间        Long time1 = null;  //代表9：30        Long time2 = null;  //代表23：55，  多出5分钟，以防延迟        Calendar cal = Calendar.getInstance();        time0 = cal.getTimeInMillis();        cal.set(Calendar.HOUR_OF_DAY, 9);        cal.set(Calendar.MINUTE, 30);        time1 = cal.getTimeInMillis();        cal = Calendar.getInstance();        cal.set(Calendar.HOUR_OF_DAY, 23);        cal.set(Calendar.MINUTE, 55);        time2 = cal.getTimeInMillis();        boolean atTime = false;  //表示在这个时间段 0 30/20 9-23 * * ?        if ((time0 >= time1 && time0 <= time2)) {            atTime = true;        }        if (!atTime) return;        JSONObject object = new JSONObject();        BjpksLotterySgExample example = new BjpksLotterySgExample();        BjpksLotterySgExample.Criteria criteria = example.createCriteria();        criteria.andIdealTimeGreaterThan(DateUtils.formatDate(new Date(), DateUtils.fullDatePattern));        example.setOrderByClause("`ideal_time` ASC");        BjpksLotterySg nextSg = bjpksLotterySgMapper.selectOneByExample(example);        example = new BjpksLotterySgExample();        criteria = example.createCriteria();        criteria.andIdealTimeLessThan(DateUtils.formatDate(new Date(), DateUtils.fullDatePattern));        example.setOrderByClause("`ideal_time` desc");        example.setOffset(0);        example.setLimit(10);        List<BjpksLotterySg> lastSgList = bjpksLotterySgMapper.selectByExample(example);        JSONObject lottery = new JSONObject();        object.put("nextTime", DateUtils.parseDate(nextSg.getIdealTime(), DateUtils.fullDatePattern).getTime() / 1000);        object.put("nextIssue", nextSg.getIssue());        BjpksLotterySg lastSgTrue = null;        for (BjpksLotterySg lastSg : lastSgList) {            String lastNumber = StringUtils.isNotBlank(lastSg.getCpkNumber()) ? lastSg.getCpkNumber() : StringUtils.isNotBlank(lastSg.getKcwNumber()) ? lastSg.getKcwNumber() : "";            if (StringUtils.isNotBlank(lastNumber)) {                object.put("issue", lastSg.getIssue());                object.put("number", lastNumber);                lastSgTrue = lastSg;                break;            }            continue;        }        Calendar startCal = Calendar.getInstance();        startCal.setTime(DateUtils.parseDate(lastSgTrue.getIdealTime(), DateUtils.fullDatePattern));        startCal.set(Calendar.HOUR_OF_DAY, 9);        startCal.set(Calendar.MINUTE, 30);        startCal.set(Calendar.SECOND, 0);        long jiange = DateUtils.timeReduce(lastSgTrue.getIdealTime(), DateUtils.formatDate(startCal.getTime(), DateUtils.fullDatePattern));        int openCount = (int) (jiange / 1200) + 1;        int noOpenCount = CaipiaoSumCountEnum.BJPKS.getSumCount() - openCount;        object.put("openCount", openCount);        object.put("noOpenCount", noOpenCount);        JSONObject objectAll = new JSONObject();        lottery.put(CaipiaoTypeEnum.BJPKS.getTagType(), object);        objectAll.put("data", lottery);        objectAll.put("status", 1);        objectAll.put("time", new Date().getTime() / 1000);        objectAll.put("info", "成功");        String jsonString = objectAll.toJSONString();        jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_APP_CHANGE_ISSUE_PK10_BJ, jsonString);        XxlJobLogger.log(ActiveMQConfig.TOPIC_APP_CHANGE_ISSUE_PK10_BJ + "执行任务成功" + DateUtils.formatDate(new Date(), DateUtils.fullDatePattern) + "," + jsonString);    }    @Override    @Transactional    public void addBjpksSgCount() {        String date = DateUtils.formatDate(DateUtils.getDayAfter(new Date(), -1L), DateUtils.datePattern);        // 获取昨天的赛果记录        BjpksLotterySgExample example = new BjpksLotterySgExample();        BjpksLotterySgExample.Criteria criteria = example.createCriteria();        criteria.andTimeLike(date + "%");        List<BjpksLotterySg> bjpksLotterySgs = this.bjpksLotterySgMapper.selectByExample(example);        if (bjpksLotterySgs != null && bjpksLotterySgs.size() > 0) {            // 对赛果进行统计            BjpksCountSgdx countSgdx = BjpksUtils.countSgDx(bjpksLotterySgs);            BjpksCountSgds bjpksCountSgds = BjpksUtils.countSgDs(bjpksLotterySgs);            BjpksCountSglh bjpksCountSglh = BjpksUtils.countSgLh(bjpksLotterySgs);            //根据日期判断是否已录入数据库            //大小统计            BjpksCountSgdxExample example1 = new BjpksCountSgdxExample();            BjpksCountSgdxExample.Criteria criteria1 = example1.createCriteria();            criteria1.andDateEqualTo(date);            BjpksCountSgdx countSgdx1 = this.bjpksCountSgdxMapper.selectOneByExample(example1);            if (countSgdx1 == null) {                //没有就录入                this.bjpksCountSgdxMapper.insertSelective(countSgdx);            } else {                //已经录入就更新                this.bjpksCountSgdxMapper.updateByExample(countSgdx, example1);            }            String jsonObject = JSON.toJSONString(countSgdx);            jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_DX_TJ_DATA, "BjpksCountSgdx:" + jsonObject);            //单双统计            BjpksCountSgdsExample example2 = new BjpksCountSgdsExample();            BjpksCountSgdsExample.Criteria criteria2 = example2.createCriteria();            criteria2.andDateEqualTo(date);            BjpksCountSgds countSgds2 = this.bjpksCountSgdsMapper.selectOneByExample(example2);            if (countSgds2 == null) {                //没有就录入                this.bjpksCountSgdsMapper.insertSelective(bjpksCountSgds);            } else {                //已经录入就更新                this.bjpksCountSgdsMapper.updateByExample(bjpksCountSgds, example2);            }            jsonObject = JSON.toJSONString(bjpksCountSgds);            jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_DS_TJ_DATA, "BjpksCountSgds:" + jsonObject);            //龙虎统计            BjpksCountSglhExample example3 = new BjpksCountSglhExample();            BjpksCountSglhExample.Criteria criteria3 = example3.createCriteria();            criteria3.andDateEqualTo(date);            BjpksCountSglh countSglh3 = this.bjpksCountSglhMapper.selectOneByExample(example3);            if (countSglh3 == null) {                //没有就录入                this.bjpksCountSglhMapper.insertSelective(bjpksCountSglh);            } else {                //已经录入就更新                this.bjpksCountSglhMapper.updateByExample(bjpksCountSglh, example3);            }            jsonObject = JSON.toJSONString(bjpksCountSglh);            jmsMessagingTemplate.convertAndSend(ActiveMQConfig.TOPIC_BJPKS_LH_TJ_DATA, "BjpksCountSglh:" + jsonObject);        }    }    /**     * 获取下一期官方开奖时间     *     * @param dateTime 当前期官方开奖时间     * @return     */    private Date nextIssueTime(Date dateTime) {        return DateUtils.getMinuteAfter(dateTime, 20);    }    /**     * 根据期号区间查询所有遗漏数据【近179期】     *     * @param startIssue 开始期号【不包括】     * @param endIssue   结束期号【包括】     * @return     */    private List<BjpksLotterySg> queryOmittedData(String startIssue, String endIssue) {        BjpksLotterySgExample example = new BjpksLotterySgExample();        BjpksLotterySgExample.Criteria criteria = example.createCriteria();        criteria.andIssueGreaterThan(startIssue);        criteria.andIssueLessThanOrEqualTo(endIssue);        example.setOrderByClause("`ideal_time` DESC");        example.setOffset(0);        example.setLimit(44);        return bjpksLotterySgMapper.selectByExample(example);    }}