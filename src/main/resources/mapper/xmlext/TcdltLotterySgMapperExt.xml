<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.caipiao.live.common.mybatis.mapperext.sg.TcdltLotterySgMapperExt">
    <resultMap id="BaseResultMap" type="com.caipiao.live.common.mybatis.entity.TcdltLotterySg">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="issue" jdbcType="CHAR" property="issue"/>
        <result column="number" jdbcType="CHAR" property="number"/>
        <result column="cpk_number" jdbcType="CHAR" property="cpkNumber"/>
        <result column="kcw_number" jdbcType="CHAR" property="kcwNumber"/>
        <result column="time" jdbcType="CHAR" property="time"/>
        <result column="ideal_time" jdbcType="CHAR" property="idealTime"/>
        <result column="open_status" jdbcType="CHAR" property="openStatus"/>
    </resultMap>

    <update id="updateByIssue" parameterType="com.caipiao.live.common.mybatis.entity.TcdltLotterySg">
        update lottery_tcdlt_lottery_sg
        set
        `number` = #{number,jdbcType=CHAR},
        cpk_number = #{cpkNumber,jdbcType=CHAR},
        kcw_number = #{kcwNumber,jdbcType=CHAR},
        `time` = #{time,jdbcType=CHAR},
        ideal_time = #{idealTime,jdbcType=CHAR},
        open_status = #{openStatus,jdbcType=CHAR}
        where issue = #{issue,jdbcType=CHAR}
    </update>
    <select id="openCountByExample" parameterType="Map" resultType="java.lang.Integer">
        select count(1) from lottery_tcdlt_lottery_sg
        where open_status = #{openStatus,jdbcType=CHAR}
               and time like #{paramTime,jdbcType=CHAR}
         limit 1
    </select>
    <insert id="insertBatch" parameterType="java.util.List">
        replace into lottery_tcdlt_lottery_sg (`date`, issue,`number`, cpk_number,
        kcw_number, `time`, ideal_time,
        open_status, ideal_date, actual_date)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.date,jdbcType=CHAR}, #{item.issue,jdbcType=CHAR}, #{item.number,jdbcType=CHAR}, #{item.cpkNumber,jdbcType=CHAR},
            #{item.kcwNumber,jdbcType=CHAR}, #{item.time,jdbcType=CHAR}, #{item.idealTime,jdbcType=CHAR},
            #{item.openStatus,jdbcType=CHAR}, #{item.idealDate,jdbcType=TIMESTAMP}, #{item.actualDate,jdbcType=TIMESTAMP})
        </foreach>
    </insert>
</mapper>